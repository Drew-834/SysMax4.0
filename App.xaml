<!-- App.xaml modifications to include converters and resources -->
<Application x:Class="SysMax.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SysMax"
             xmlns:models="clr-namespace:SysMax2._1.Models"
             xmlns:converters="clr-namespace:SysMax2._1.Converters"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Converters -->
        <!-- Reference the built-in BooleanToVisibilityConverter from the System.Windows namespace -->
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter" />

        <!-- Common colors and brushes -->
        <Color x:Key="PrimaryColorValue">#3498db</Color>
        <Color x:Key="PrimaryColorHoverValue">#2980b9</Color>
        <Color x:Key="PrimaryColorPressedValue">#1f6aa5</Color>
        <Color x:Key="SecondaryColorValue">#2ecc71</Color>
        <Color x:Key="WarningColorValue">#f39c12</Color>
        <Color x:Key="DangerColorValue">#e74c3c</Color>
        <Color x:Key="DarkBackgroundColorValue">#1E1E1E</Color>
        <Color x:Key="PanelBackgroundColorValue">#252525</Color>
        <Color x:Key="ItemBackgroundColorValue">#2a2a2a</Color>
        <Color x:Key="ButtonBackgroundColorValue">#2d2d2d</Color>
        <Color x:Key="OutlineButtonHoverBackgroundValue">#1e3d5c</Color> 
        <Color x:Key="ProgressBarBackgroundColorValue">#3a3a3a</Color>
        <Color x:Key="PanelBorderColorValue">#333333</Color>
        <Color x:Key="LightTextColorValue">#FFFFFF</Color>
        <Color x:Key="MutedTextColorValue">#AAAAAA</Color>
        <Color x:Key="SubtleTextColorValue">#BBBBBB</Color>
        
        <SolidColorBrush x:Key="PrimaryColor" Color="{StaticResource PrimaryColorValue}"/>
        <SolidColorBrush x:Key="PrimaryColorHover" Color="{StaticResource PrimaryColorHoverValue}"/>
        <SolidColorBrush x:Key="PrimaryColorPressed" Color="{StaticResource PrimaryColorPressedValue}"/>
        <SolidColorBrush x:Key="SecondaryColor" Color="{StaticResource SecondaryColorValue}"/>
        <SolidColorBrush x:Key="DarkBackgroundColor" Color="{StaticResource DarkBackgroundColorValue}"/>
        <SolidColorBrush x:Key="LightTextColor" Color="{StaticResource LightTextColorValue}"/>
        <SolidColorBrush x:Key="MutedTextColor" Color="{StaticResource MutedTextColorValue}"/>
        <SolidColorBrush x:Key="WarningColor" Color="{StaticResource WarningColorValue}"/>
        <SolidColorBrush x:Key="DangerColor" Color="{StaticResource DangerColorValue}"/>
        <SolidColorBrush x:Key="PanelBackgroundColor" Color="{StaticResource PanelBackgroundColorValue}"/>
        <SolidColorBrush x:Key="PanelBorderColor" Color="{StaticResource PanelBorderColorValue}"/>
        <SolidColorBrush x:Key="ItemBackgroundColor" Color="{StaticResource ItemBackgroundColorValue}"/>
        <SolidColorBrush x:Key="ButtonBackgroundColor" Color="{StaticResource ButtonBackgroundColorValue}"/>
        <SolidColorBrush x:Key="OutlineButtonHoverBackground" Color="{StaticResource OutlineButtonHoverBackgroundValue}"/>
        <SolidColorBrush x:Key="ProgressBarBackgroundColor" Color="{StaticResource ProgressBarBackgroundColorValue}"/>
        <SolidColorBrush x:Key="SubtleTextColor" Color="{StaticResource SubtleTextColorValue}"/>

        <!-- Common Thickness -->
        <Thickness x:Key="SmallPadding">5</Thickness>
        <Thickness x:Key="MediumPadding">10</Thickness>
        <Thickness x:Key="LargePadding">15</Thickness>
        <Thickness x:Key="StandardButtonPadding">15,8</Thickness>
        <Thickness x:Key="SmallButtonPadding">10,5</Thickness>
        <Thickness x:Key="SmallMargin">5</Thickness>
        <Thickness x:Key="MediumMargin">10</Thickness>
        <Thickness x:Key="LargeMargin">15</Thickness>

        <!-- Base TextBlock Style -->
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <!-- Card Styles -->
        <Style x:Key="CardStyle" TargetType="Border">
            <Setter Property="Background" Value="{StaticResource PanelBackgroundColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource PanelBorderColor}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="8"/>
            <Setter Property="Padding" Value="{StaticResource LargePadding}"/>
            <Setter Property="Margin" Value="{StaticResource MediumMargin}"/>
        </Style>

        <Style x:Key="MetricCardStyle" TargetType="Border">
            <Setter Property="Background" Value="{StaticResource ItemBackgroundColor}"/>
            <Setter Property="CornerRadius" Value="6"/>
            <Setter Property="Padding" Value="{StaticResource LargePadding}"/>
            <Setter Property="Margin" Value="{StaticResource SmallMargin}"/>
        </Style>

        <!-- Header/Title Styles -->
         <Style x:Key="PageHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,0,0,15"/> <!-- Bottom margin for spacing -->
        </Style>
        
        <Style x:Key="CardHeaderStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Margin" Value="0,0,0,15"/>
        </Style>

        <!-- Button Styles -->
        <Style x:Key="BaseButtonStyle" TargetType="Button">
            <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" 
                                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="PrimaryButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
            <Setter Property="Padding" Value="{StaticResource StandardButtonPadding}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" 
                                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PrimaryColorHover}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PrimaryColorPressed}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SmallPrimaryButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
             <Setter Property="Padding" Value="{StaticResource SmallButtonPadding}"/>
        </Style>

        <Style x:Key="OutlineButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource PrimaryColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryColor}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="{StaticResource StandardButtonPadding}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter HorizontalAlignment="Center" 
                                              VerticalAlignment="Center" 
                                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource OutlineButtonHoverBackground}"/>
                                <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
                            </Trigger>
                             <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PrimaryColorPressed}"/> <!-- Use pressed primary for consistency -->
                                <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Navigation Button Style -->
        <Style x:Key="NavButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource MutedTextColor}"/>
            <Setter Property="Padding" Value="15,10"/>
            <Setter Property="Margin" Value="5,2"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" 
                                Padding="{TemplateBinding Padding}" 
                                Margin="{TemplateBinding Margin}" 
                                CornerRadius="4"> 
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource ItemBackgroundColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
                            </Trigger>
                             <Trigger Property="Tag" Value="Active"> <!-- Using Tag to mark active -->
                                <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource ItemBackgroundColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!--Combobox solution?-->
        <Style x:Key="DarkComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="#2d2d2d"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderBrush" Value="#444444"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="5,3"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton 
                        Name="ToggleButton" 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="false"
                        IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Border 
                                    Name="Border" 
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="4">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="20" />
                                                </Grid.ColumnDefinitions>
                                                <ContentPresenter 
                                            Grid.Column="0"
                                            HorizontalAlignment="Left" 
                                            VerticalAlignment="Center" 
                                            Margin="5,0,0,0"/>
                                                <Path 
                                            Grid.Column="1"
                                            x:Name="Arrow"
                                            Fill="White"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Data="M 0 0 L 4 4 L 8 0 Z"/>
                                            </Grid>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter TargetName="Border" Property="Background" Value="#3d3d3d"/>
                                            </Trigger>
                                            <Trigger Property="IsChecked" Value="true">
                                                <Setter TargetName="Border" Property="Background" Value="#3d3d3d"/>
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter TargetName="Border" Property="Background" Value="#222222"/>
                                                <Setter TargetName="Border" Property="BorderBrush" Value="#333333"/>
                                                <Setter TargetName="Arrow" Property="Fill" Value="#666666"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter 
                        Name="ContentSite" 
                        IsHitTestVisible="False"
                        Content="{TemplateBinding SelectionBoxItem}"
                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                        Margin="8,3,23,3"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left" />
                            <Popup 
                        Name="Popup"
                        Placement="Bottom"
                        IsOpen="{TemplateBinding IsDropDownOpen}"
                        AllowsTransparency="True" 
                        Focusable="False"
                        PopupAnimation="Slide">
                                <Grid 
                            Name="DropDown"
                            SnapsToDevicePixels="True"
                            MinWidth="{TemplateBinding ActualWidth}"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border 
                                x:Name="DropDownBorder"
                                Background="#252525"
                                BorderBrush="#444444"
                                BorderThickness="1"
                                CornerRadius="0,0,4,4"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#666666"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Background" Value="#252525"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBoxItem">
                                <Border x:Name="Border" 
                                Padding="5,3"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="true">
                                    <ContentPresenter />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsHighlighted" Value="true">
                                        <Setter TargetName="Border" Property="Background" Value="#3498db"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="#666666"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.Resources>
        </Style>
        
        <!-- Custom ProgressBar Style -->
        <Style x:Key="ThemedProgressBarStyle" TargetType="ProgressBar">
            <Setter Property="Height" Value="8"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="{StaticResource ProgressBarBackgroundColor}"/>
            <Setter Property="Foreground" Value="{StaticResource SecondaryColor}"/> <!-- Default to green -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Grid>
                            <Border Name="PART_Track" CornerRadius="4" 
                                    Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border Name="PART_Indicator" CornerRadius="4" 
                                    Background="{TemplateBinding Foreground}" 
                                    HorizontalAlignment="Left" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <!-- Change color based on value -->
                <Trigger Property="Value" Value="75">
                    <Setter Property="Foreground" Value="{StaticResource WarningColor}"/>
                </Trigger>
                <Trigger Property="Value" Value="90">
                     <Setter Property="Foreground" Value="{StaticResource DangerColor}"/>
                </Trigger>
                 <!-- Trigger for values greater than 75 (Warning) -->
                 <!-- Note: This requires a custom approach or converter as direct > comparison isn't standard -->
                 <!-- Using simple value triggers for now, can enhance later -->
            </Style.Triggers>
        </Style>
        
    </Application.Resources>
</Application>